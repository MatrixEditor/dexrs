from typing import Optional, Tuple, List

from .container import InMemoryDexContainer, FileDexContainer
from .structs import (
    Header,
    StringId,
    TypeId,
    FieldId,
    ProtoId,
    MethodId,
    ClassDef,
    TypeItem,
    CatchHandlerData,
    TryItem,
)
from .class_accessor import ClassAccessor
from .code import CodeItemAccessor

class VerifyPreset:
    ALL: VerifyPreset
    NONE: VerifyPreset
    CHECKSUM_ONLY: VerifyPreset

class DexFile:
    @staticmethod
    def from_file(data: FileDexContainer, preset: VerifyPreset = ...) -> DexFile: ...
    @staticmethod
    def from_bytes(
        data: InMemoryDexContainer, preset: VerifyPreset = ...
    ) -> DexFile: ...

    # instance methods
    def get_header(self) -> Header: ...

    # string ids
    def get_string_id(self, index: int) -> StringId: ...
    def get_string_id_opt(self, index: int) -> Optional[StringId]: ...
    def num_string_ids(self) -> int: ...

    # string operations
    def get_utf16_at(self, index: int) -> str: ...
    def get_utf16(self, string_id: StringId) -> str: ...
    def get_utf16_opt_at(self, string_id: StringId) -> Optional[str]: ...
    def get_utf16_lossy(self, string_id: StringId) -> str: ...
    def get_utf16_lossy_at(self, index: int) -> str: ...
    def get_string_data(self, string_id: StringId) -> Tuple[int, bytes]: ...
    def fast_get_utf8(self, string_id: StringId) -> str: ...
    def fast_get_utf8_at(self, index: int) -> str: ...

    # type ids
    def get_type_id(self, index: int) -> TypeId: ...
    def get_type_id_opt(self, index: int) -> Optional[TypeId]: ...
    def num_type_ids(self) -> int: ...
    def get_type_desc(self, type_id: TypeId) -> str: ...
    def get_type_desc_at(self, index: int) -> str: ...
    def pretty_type_at(self, index: int) -> str: ...
    def pretty_type(self, type_id: TypeId) -> str: ...

    # field ids
    def get_field_id(self, index: int) -> FieldId: ...
    def get_field_id_opt(self, index: int) -> Optional[FieldId]: ...
    def num_field_ids(self) -> int: ...
    def get_field_name(self, field_id: FieldId) -> str: ...
    def get_field_name_at(self, index: int) -> str: ...

    # proto ids
    def get_proto_id(self, index: int) -> ProtoId: ...
    def get_proto_id_opt(self, index: int) -> Optional[ProtoId]: ...
    def num_proto_ids(self) -> int: ...
    def get_proto_shorty(self, proto_id: ProtoId) -> str: ...
    def get_proto_shorty_at(self, index: int) -> str: ...

    # method ids
    def get_method_id(self, index: int) -> MethodId: ...
    def get_method_id_opt(self, index: int) -> Optional[MethodId]: ...
    def num_method_ids(self) -> int: ...

    # class defs
    def get_class_def(self, index: int) -> ClassDef: ...
    def get_class_def_opt(self, index: int) -> Optional[ClassDef]: ...
    def num_class_defs(self) -> int: ...
    def get_class_desc(self, class_def: ClassDef) -> str: ...
    def get_interfaces_list(self, class_def: ClassDef) -> Optional[List[TypeItem]]: ...

    # class data
    def get_class_accessor(self, class_def: ClassDef) -> Optional[ClassAccessor]: ...
    def get_code_item_accessor(self, code_off: int) -> CodeItemAccessor: ...
    def get_try_items(self, ca: CodeItemAccessor) -> List[TryItem]: ...
    def get_catch_handlers(self, ca: CodeItemAccessor, try_item: TryItem) -> List[CatchHandlerData]: ...
    def get_catch_handlers_at(
        self, ca: CodeItemAccessor, offset: int
    ) -> List[CatchHandlerData]: ...
